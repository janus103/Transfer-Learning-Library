Namespace(arch='resnet50', batch_size=16, bottleneck_dim=256, data='ImageNet50', epochs=300, iters_per_epoch=1000, log='dann', lr=0.01, lr_decay=0.75, lr_gamma=0.001, momentum=0.9, no_hflip=False, no_pool=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), per_class_eval=False, phase='train', print_freq=100, resize_size=224, root='/data/ImageNet_dataset/v100/jin/', scratch=False, seed=None, source=['IN'], target=['gray'], trade_off=1.0, train_resizing='custom.target', val_resizing='custom.target', weight_decay=0.001, workers=2)
train_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
val_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    ToTensor()
)
=> using model 'resnet50'
lr: 0.001
tensor([[-1.7412, -1.6555, -1.7240,  ..., -0.3369, -0.2342, -0.0629],
        [-1.6898, -1.6898, -1.4500,  ..., -0.4397, -0.4054, -0.0801],
        [-1.5357, -1.3815, -1.3302,  ..., -0.4226, -0.1828, -0.2684],
        ...,
        [-1.5014, -1.4500, -1.4672,  ..., -1.7412, -1.7240, -1.6727],
        [-1.3815, -1.7583, -1.1247,  ..., -1.6042, -1.7925, -1.6213],
        [-1.1932, -1.2959, -1.0219,  ..., -1.7069, -1.8268, -1.7069]])
tensor([[-1.6506, -1.5630, -1.6331,  ..., -0.2150, -0.1099,  0.0651],
        [-1.5980, -1.5980, -1.3529,  ..., -0.3200, -0.2850,  0.0476],
        [-1.4405, -1.2829, -1.2304,  ..., -0.3025, -0.0574, -0.1450],
        ...,
        [-1.4055, -1.3529, -1.3704,  ..., -1.6506, -1.6331, -1.5805],
        [-1.2829, -1.6681, -1.0203,  ..., -1.5105, -1.7031, -1.5280],
        [-1.0903, -1.1954, -0.9153,  ..., -1.6155, -1.7381, -1.6155]])
tensor([[ 2.3936,  2.3936,  2.4286,  ..., -1.3354, -1.3704, -1.4230],
        [ 2.3936,  2.3936,  2.4286,  ..., -1.3880, -1.3704, -1.3880],
        [ 2.3936,  2.3761,  2.3936,  ..., -1.4230, -1.3880, -1.3880],
        ...,
        [ 2.1485,  2.1485,  2.0959,  ..., -0.9503, -0.7402,  0.3102],
        [ 2.1835,  2.1660,  2.0959,  ..., -0.9678, -0.3375,  0.8704],
        [ 2.1835,  2.1485,  2.1134,  ..., -0.8978,  0.2752,  1.3256]])
Epoch: [0][   0/1000]	Time  1.34 ( 1.34)	Data  0.01 ( 0.01)	Loss   4.72 (  4.72)	Cls Acc 0.0 (0.0)	Domain Acc 50.0 (50.0)
tensor([[-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],
        [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],
        [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],
        ...,
        [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],
        [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],
        [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179]])
tensor([[-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],
        [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],
        [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],
        ...,
        [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],
        [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],
        [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357]])
tensor([[ 1.6758,  1.6758,  1.6933,  ..., -1.0203, -0.8452, -0.7577],
        [ 1.7108,  1.7108,  1.7108,  ..., -0.9328, -0.4426, -0.7927],
        [ 1.7108,  1.7108,  1.7283,  ..., -0.6527, -0.4251, -0.7052],
        ...,
        [-0.5301, -0.3901,  0.3102,  ...,  0.0476,  0.7129,  0.6604],
        [ 0.3803,  0.0826,  0.2052,  ..., -0.0749,  0.2052,  0.2577],
        [ 0.2927, -0.5476, -0.3375,  ...,  0.1527,  0.1001, -0.5476]])
tensor([[-1.1589, -1.1247, -1.1589,  ..., -1.7412, -1.6384, -0.0458],
        [-1.0048, -0.8678, -1.1247,  ..., -1.6384, -1.1760,  0.3652],
        [-1.1760, -1.2274, -0.9192,  ..., -1.7583, -1.2788,  0.5022],
        ...,
        [-1.3815, -1.3644, -1.2959,  ...,  0.1083,  0.1254, -0.1143],
        [-1.3473, -1.3815, -1.3473,  ..., -0.0629,  0.0056, -0.4054],
        [-1.4672, -1.3815, -1.3815,  ..., -1.3130, -1.3473, -1.1932]])
tensor([[-1.0553, -1.0203, -1.0553,  ..., -1.6506, -1.5455,  0.0826],
        [-0.8978, -0.7577, -1.0203,  ..., -1.5455, -1.0728,  0.5028],
        [-1.0728, -1.1253, -0.8102,  ..., -1.6681, -1.1779,  0.6429],
        ...,
        [-1.2829, -1.2654, -1.1954,  ...,  0.2402,  0.2577,  0.0126],
        [-1.2479, -1.2829, -1.2479,  ...,  0.0651,  0.1352, -0.2850],
        [-1.3704, -1.2829, -1.2829,  ..., -1.2129, -1.2479, -1.0903]])
tensor([[ 0.6078,  0.4853,  0.3277,  ..., -0.9678, -1.0903, -0.7752],
        [ 0.5728,  0.4853,  0.4328,  ..., -1.4055, -1.4055, -1.1954],
        [ 0.4153,  0.3102,  0.2577,  ..., -1.5630, -1.5630, -1.3880],
        ...,
        [ 1.3081,  1.7633,  1.8158,  ..., -1.9132, -1.9132, -1.8957],
        [ 1.1506,  1.8333,  1.8333,  ..., -1.9307, -1.9307, -1.9132],
        [ 0.9930,  1.8333,  1.8508,  ..., -1.9307, -1.9307, -1.9307]])
tensor([[-1.6555, -1.6898, -1.6898,  ..., -0.9877, -1.1932, -1.0562],
        [-1.6213, -1.6727, -1.6727,  ..., -0.8507, -1.1589, -1.1418],
        [-1.6213, -1.6555, -1.6727,  ..., -0.9020, -1.0904, -1.1589],
        ...,
        [-0.3027, -0.2342, -0.5253,  ..., -0.2171, -0.4911, -0.6109],
        [-0.5424, -0.5253, -0.6452,  ..., -0.1828, -0.5082, -0.5938],
        [-0.5938, -0.7479, -0.6794,  ..., -0.1657, -0.4568, -0.5082]])
tensor([[-1.5630, -1.5980, -1.5980,  ..., -0.8803, -1.0903, -0.9503],
        [-1.5280, -1.5805, -1.5805,  ..., -0.7402, -1.0553, -1.0378],
        [-1.5280, -1.5630, -1.5805,  ..., -0.7927, -0.9853, -1.0553],
        ...,
        [-0.1800, -0.1099, -0.4076,  ..., -0.0924, -0.3725, -0.4951],
        [-0.4251, -0.4076, -0.5301,  ..., -0.0574, -0.3901, -0.4776],
        [-0.4776, -0.6352, -0.5651,  ..., -0.0399, -0.3375, -0.3901]])
tensor([[ 0.6254,  0.6078,  0.6429,  ...,  1.1856,  1.2031,  1.2206],
        [ 0.5553,  0.5903,  0.5728,  ...,  1.1506,  1.1856,  1.2031],
        [ 0.4853,  0.4853,  0.5203,  ...,  1.1331,  1.1331,  1.0980],
        ...,
        [-1.8606, -1.8431, -1.9132,  ..., -0.2325, -0.2850, -0.3025],
        [-1.8606, -1.8957, -1.9482,  ..., -0.3025, -0.3025, -0.3200],
        [-1.9132, -1.9482, -1.9832,  ..., -0.3375, -0.3375, -0.3550]])
tensor([[-0.1486,  0.0741, -0.1657,  ...,  1.9578,  1.9578,  2.0263],
        [ 0.1083,  0.4508,  0.6049,  ...,  1.8379,  1.7523,  1.8037],
        [-0.3198,  0.3309,  0.6563,  ...,  1.6495,  1.6495,  1.6324],
        ...,
        [-1.4500, -1.9467, -1.2617,  ...,  1.3242,  1.5639,  1.9235],
        [-1.4500, -1.8097, -1.2788,  ...,  1.4269,  1.7352,  1.4612],
        [-1.4843, -1.5357, -1.0562,  ...,  1.3413,  1.9749,  1.0502]])
tensor([[-0.0224,  0.2052, -0.0399,  ...,  2.1310,  2.1310,  2.2010],
        [ 0.2402,  0.5903,  0.7479,  ...,  2.0084,  1.9209,  1.9734],
        [-0.1975,  0.4678,  0.8004,  ...,  1.8158,  1.8158,  1.7983],
        ...,
        [-1.3529, -1.8606, -1.1604,  ...,  1.4832,  1.7283,  2.0959],
        [-1.3529, -1.7206, -1.1779,  ...,  1.5882,  1.9034,  1.6232],
        [-1.3880, -1.4405, -0.9503,  ...,  1.5007,  2.1485,  1.2031]])
tensor([[ 0.1877,  0.2052,  0.2402,  ..., -1.4405, -1.5630, -1.6681],
        [ 0.2227,  0.2577,  0.2752,  ..., -1.4580, -1.4580, -1.6331],
        [ 0.2227,  0.2577,  0.2927,  ..., -1.3004, -1.4230, -1.5980],
        ...,
        [ 0.2752,  0.2752,  0.2927,  ...,  0.6604,  0.5903,  0.5903],
        [ 0.2402,  0.2402,  0.2927,  ...,  0.6254,  0.6078,  0.5378],
        [ 0.1702,  0.1877,  0.2577,  ...,  0.6078,  0.5903,  0.5378]])
Traceback (most recent call last):
  File "dann.py", line 294, in <module>
    main(args)
  File "dann.py", line 145, in main
    lr_scheduler, epoch, args)
  File "dann.py", line 185, in train
    x_s, labels_s = next(train_source_iter)
  File "/src/Transfer-Learning-Library/common/utils/data.py", line 50, in __next__
    data = next(self.iter)
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 517, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1182, in _next_data
    idx, data = self._get_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1148, in _get_data
    success, data = self._try_get_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 986, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 104, in get
    if not self._poll(timeout):
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 257, in poll
    return self._poll(timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 414, in _poll
    r = wait([self], timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 911, in wait
    ready = selector.select(timeout)
  File "/opt/conda/lib/python3.6/selectors.py", line 376, in select
    fd_event_list = self._poll.poll(timeout)
KeyboardInterrupt
