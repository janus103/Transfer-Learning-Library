Namespace(arch='resnet50', batch_size=16, bottleneck_dim=256, data='ImageNet50', epochs=300, iters_per_epoch=1000, log='dann', lr=0.01, lr_decay=0.75, lr_gamma=0.001, momentum=0.9, no_hflip=False, no_pool=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), per_class_eval=False, phase='train', print_freq=100, resize_size=224, root='/data/ImageNet_dataset/v100/jin/', scratch=False, seed=None, source=['IN'], target=['gray'], trade_off=1.0, train_resizing='custom.target', val_resizing='custom.target', weight_decay=0.001, workers=2)
train_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
val_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
=> using model 'resnet50'
lr: 0.001
tensor([[-1.0904, -1.0733, -1.0733,  ..., -1.4500, -1.5870, -1.3644],
        [-1.1589, -1.1589, -1.2788,  ..., -1.5185, -1.4843, -1.6042],
        [-1.2274, -1.2103, -1.2445,  ..., -1.3987, -1.3815, -1.4500],
        ...,
        [-0.6965, -0.6794, -0.7308,  ..., -0.5082, -0.6109, -0.6452],
        [-0.4739, -0.6794, -1.1247,  ..., -0.5424, -0.6623, -0.9705],
        [-0.7479, -0.5938, -0.9877,  ..., -0.6281, -0.7993, -1.3815]])
tensor([[-0.9853, -0.9678, -0.9678,  ..., -1.3529, -1.4930, -1.2654],
        [-1.0553, -1.0553, -1.1779,  ..., -1.4230, -1.3880, -1.5105],
        [-1.1253, -1.1078, -1.1429,  ..., -1.3004, -1.2829, -1.3529],
        ...,
        [-0.5826, -0.5651, -0.6176,  ..., -0.3901, -0.4951, -0.5301],
        [-0.3550, -0.5651, -1.0203,  ..., -0.4251, -0.5476, -0.8627],
        [-0.6352, -0.4776, -0.8803,  ..., -0.5126, -0.6877, -1.2829]])
Epoch: [0][   0/1000]	Time  1.45 ( 1.45)	Data  0.04 ( 0.04)	Loss   4.59 (  4.59)	Cls Acc 0.0 (0.0)	Domain Acc 50.0 (50.0)
tensor([[1.7865, 1.7865, 1.7865,  ..., 1.9749, 1.9578, 1.9578],
        [1.8550, 1.8379, 1.8379,  ..., 1.9749, 1.9578, 1.9578],
        [1.8893, 1.9064, 1.9407,  ..., 1.9749, 1.9578, 1.9578],
        ...,
        [2.0263, 2.1119, 2.1975,  ..., 2.1119, 2.1633, 1.9578],
        [1.8037, 1.9578, 2.1119,  ..., 1.8208, 1.9064, 2.0948],
        [2.0263, 1.8722, 1.9235,  ..., 1.7694, 1.7009, 1.9749]])
tensor([[1.9559, 1.9559, 1.9559,  ..., 2.1485, 2.1310, 2.1310],
        [2.0259, 2.0084, 2.0084,  ..., 2.1485, 2.1310, 2.1310],
        [2.0609, 2.0784, 2.1134,  ..., 2.1485, 2.1310, 2.1310],
        ...,
        [2.2010, 2.2885, 2.3761,  ..., 2.2885, 2.3410, 2.1310],
        [1.9734, 2.1310, 2.2885,  ..., 1.9909, 2.0784, 2.2710],
        [2.2010, 2.0434, 2.0959,  ..., 1.9384, 1.8683, 2.1485]])
tensor([[-1.7412, -1.7925, -1.8268,  ...,  0.4508,  0.3823,  0.1597],
        [-1.7754, -1.8439, -1.8610,  ...,  0.4166,  0.3994,  0.2453],
        [-1.7925, -1.8268, -1.8439,  ...,  0.2111,  0.3138,  0.3138],
        ...,
        [-0.8507, -1.0904, -0.5938,  ..., -0.4568, -0.9020, -0.2513],
        [-0.9020, -0.5424, -0.5596,  ..., -0.3369, -0.4911, -0.6281],
        [-0.5424, -0.5424, -1.2274,  ..., -0.4226, -0.4397, -0.3541]])
tensor([[-1.6506, -1.7031, -1.7381,  ...,  0.5903,  0.5203,  0.2927],
        [-1.6856, -1.7556, -1.7731,  ...,  0.5553,  0.5378,  0.3803],
        [-1.7031, -1.7381, -1.7556,  ...,  0.3452,  0.4503,  0.4503],
        ...,
        [-0.7402, -0.9853, -0.4776,  ..., -0.3375, -0.7927, -0.1275],
        [-0.7927, -0.4251, -0.4426,  ..., -0.2150, -0.3725, -0.5126],
        [-0.4251, -0.4251, -1.1253,  ..., -0.3025, -0.3200, -0.2325]])
tensor([[ 2.2489,  2.2489,  2.2489,  ..., -0.9020, -1.0562, -1.1418],
        [ 2.2489,  2.2489,  2.2489,  ..., -1.1760, -1.1932, -1.0219],
        [ 2.2489,  2.2489,  2.2489,  ..., -0.8678, -0.6109, -0.2342],
        ...,
        [-1.0904, -1.0733, -1.0562,  ..., -0.8678, -0.6623, -0.4568],
        [-1.0904, -1.1075, -1.0562,  ..., -0.9534, -0.6794, -0.4054],
        [-1.0390, -1.0904, -1.0733,  ..., -1.1418, -0.9705, -0.9020]])
tensor([[ 2.4286,  2.4286,  2.4286,  ..., -0.7927, -0.9503, -1.0378],
        [ 2.4286,  2.4286,  2.4286,  ..., -1.0728, -1.0903, -0.9153],
        [ 2.4286,  2.4286,  2.4286,  ..., -0.7577, -0.4951, -0.1099],
        ...,
        [-0.9853, -0.9678, -0.9503,  ..., -0.7577, -0.5476, -0.3375],
        [-0.9853, -1.0028, -0.9503,  ..., -0.8452, -0.5651, -0.2850],
        [-0.9328, -0.9853, -0.9678,  ..., -1.0378, -0.8627, -0.7927]])
tensor([[ 1.1872,  1.2043,  1.2214,  ..., -1.6042, -1.6042, -1.6213],
        [ 1.2043,  1.2043,  1.2043,  ..., -1.7069, -1.6727, -1.7069],
        [ 1.2214,  1.2043,  1.2043,  ..., -1.7240, -1.7583, -1.7754],
        ...,
        [-1.7925, -1.7069, -1.5870,  ..., -1.9638, -1.9467, -1.9124],
        [-1.7412, -1.7583, -1.5699,  ..., -1.9295, -1.9467, -1.9809],
        [-1.8439, -1.8097, -1.6555,  ..., -1.9124, -1.8953, -1.9124]])
tensor([[ 1.3431,  1.3606,  1.3782,  ..., -1.5105, -1.5105, -1.5280],
        [ 1.3606,  1.3606,  1.3606,  ..., -1.6155, -1.5805, -1.6155],
        [ 1.3782,  1.3606,  1.3606,  ..., -1.6331, -1.6681, -1.6856],
        ...,
        [-1.7031, -1.6155, -1.4930,  ..., -1.8782, -1.8606, -1.8256],
        [-1.6506, -1.6681, -1.4755,  ..., -1.8431, -1.8606, -1.8957],
        [-1.7556, -1.7206, -1.5630,  ..., -1.8256, -1.8081, -1.8256]])
tensor([[-0.8678, -0.8335, -0.7650,  ..., -1.1075, -1.1075, -1.1247],
        [-0.8164, -0.7650, -0.7308,  ..., -1.0562, -1.0733, -1.0904],
        [-0.7822, -0.7650, -0.7137,  ..., -1.0048, -1.0390, -1.0562],
        ...,
        [-0.7822, -0.7308, -0.7479,  ..., -1.1247, -1.1589, -1.1589],
        [-0.8164, -0.7479, -0.7137,  ..., -1.1075, -1.1418, -1.1418],
        [-0.8335, -0.7822, -0.7822,  ..., -1.1247, -1.1418, -1.1247]])
tensor([[-0.7577, -0.7227, -0.6527,  ..., -1.0028, -1.0028, -1.0203],
        [-0.7052, -0.6527, -0.6176,  ..., -0.9503, -0.9678, -0.9853],
        [-0.6702, -0.6527, -0.6001,  ..., -0.8978, -0.9328, -0.9503],
        ...,
        [-0.6702, -0.6176, -0.6352,  ..., -1.0203, -1.0553, -1.0553],
        [-0.7052, -0.6352, -0.6001,  ..., -1.0028, -1.0378, -1.0378],
        [-0.7227, -0.6702, -0.6702,  ..., -1.0203, -1.0378, -1.0203]])
Traceback (most recent call last):
  File "dann.py", line 293, in <module>
    main(args)
  File "dann.py", line 145, in main
    lr_scheduler, epoch, args)
  File "dann.py", line 185, in train
    x_s, labels_s = next(train_source_iter)
  File "/src/Transfer-Learning-Library/common/utils/data.py", line 50, in __next__
    data = next(self.iter)
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 517, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1182, in _next_data
    idx, data = self._get_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1148, in _get_data
    success, data = self._try_get_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 986, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 104, in get
    if not self._poll(timeout):
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 257, in poll
    return self._poll(timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 414, in _poll
    r = wait([self], timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 911, in wait
    ready = selector.select(timeout)
  File "/opt/conda/lib/python3.6/selectors.py", line 376, in select
    fd_event_list = self._poll.poll(timeout)
KeyboardInterrupt
