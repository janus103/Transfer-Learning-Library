Namespace(arch='resnet50', batch_size=8, bottleneck_dim=256, data='ImageNet50', epochs=1000, iters_per_epoch=1000, log='dann', lr=0.01, lr_decay=0.75, lr_gamma=0.001, momentum=0.9, no_hflip=False, no_pool=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), per_class_eval=False, phase='train', print_freq=100, resize_size=224, root='/media/ImageNet_dataset/v100/jin/', scratch=False, seed=None, source=['IN'], target=['gray'], trade_off=1.0, train_resizing='custom.source', val_resizing='custom.source', weight_decay=0.001, workers=2)
train_transform:  Compose(
    Compose(
    ResizeImage(size=(448, 448))
    CenterCrop(size=(448, 448))
)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
)
val_transform:  Compose(
    Compose(
    ResizeImage(size=(448, 448))
    CenterCrop(size=(448, 448))
    Grayscale(num_output_channels=1)
)
    ToTensor()
)
=> using model 'resnet50'
lr: 0.001
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
Epoch: [0][   0/1000]	Time  2.27 ( 2.27)	Data  0.03 ( 0.03)	Loss   4.60 (  4.60)	Cls Acc 0.0 (0.0)	Domain Acc 50.0 (50.0)
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
source shape  torch.Size([8, 3, 448, 448])
torch.Size([8, 3, 448, 448])
Traceback (most recent call last):
  File "dann.py", line 299, in <module>
    main(args)
  File "dann.py", line 147, in main
    train(train_source_iter, train_target_iter, classifier, domain_adv, optimizer,
  File "dann.py", line 197, in train
    x_s = x_s.to(device)
KeyboardInterrupt
