Namespace(arch='resnet50', batch_size=16, bottleneck_dim=256, data='ImageNet50', epochs=300, iters_per_epoch=1000, log='dann', lr=0.01, lr_decay=0.75, lr_gamma=0.001, momentum=0.9, no_hflip=False, no_pool=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), per_class_eval=False, phase='train', print_freq=100, resize_size=224, root='/data/ImageNet_dataset/v100/jin/', scratch=False, seed=None, source=['IN'], target=['gray'], trade_off=1.0, train_resizing='custom.target', val_resizing='custom.target', weight_decay=0.001, workers=2)
train_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
val_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    ToTensor()
)
=> using model 'resnet50'
lr: 0.001
tensor([[ 0.5536,  0.9474,  0.5364,  ..., -0.4568, -0.4568, -0.4226],
        [ 0.6563,  0.5193,  0.5193,  ..., -0.4739, -0.4054, -0.4568],
        [ 0.2624,  0.1254,  0.6221,  ..., -0.4226, -0.3883, -0.4397],
        ...,
        [-0.7308, -0.6794, -0.5424,  ...,  1.0331,  0.8961,  0.7248],
        [-0.6965, -0.6623, -0.5424,  ...,  1.1015,  0.9988,  0.9132],
        [-0.6452, -0.6794, -0.6452,  ...,  1.2043,  1.1700,  1.0331]])
tensor([[ 0.6954,  1.0980,  0.6779,  ..., -0.3375, -0.3375, -0.3025],
        [ 0.8004,  0.6604,  0.6604,  ..., -0.3550, -0.2850, -0.3375],
        [ 0.3978,  0.2577,  0.7654,  ..., -0.3025, -0.2675, -0.3200],
        ...,
        [-0.6176, -0.5651, -0.4251,  ...,  1.1856,  1.0455,  0.8704],
        [-0.5826, -0.5476, -0.4251,  ...,  1.2556,  1.1506,  1.0630],
        [-0.5301, -0.5651, -0.5301,  ...,  1.3606,  1.3256,  1.1856]])
Epoch: [0][   0/1000]	Time  1.38 ( 1.38)	Data  0.01 ( 0.01)	Loss   4.60 (  4.60)	Cls Acc 6.2 (6.2)	Domain Acc 62.5 (62.5)
tensor([[ 0.3994,  0.3823,  0.3309,  ..., -0.8164, -0.8164, -0.8164],
        [ 0.3994,  0.3823,  0.3481,  ..., -0.8335, -0.8164, -0.8164],
        [ 0.3481,  0.3309,  0.3309,  ..., -0.8507, -0.8164, -0.8164],
        ...,
        [ 0.9132,  0.9303,  0.9303,  ...,  0.1083,  0.1597,  0.1597],
        [ 0.8789,  0.9646,  0.9988,  ...,  0.1939,  0.1939,  0.1768],
        [ 1.0673,  1.0331,  1.0159,  ...,  0.2282,  0.2111,  0.1768]])
tensor([[ 0.5378,  0.5203,  0.4678,  ..., -0.7052, -0.7052, -0.7052],
        [ 0.5378,  0.5203,  0.4853,  ..., -0.7227, -0.7052, -0.7052],
        [ 0.4853,  0.4678,  0.4678,  ..., -0.7402, -0.7052, -0.7052],
        ...,
        [ 1.0630,  1.0805,  1.0805,  ...,  0.2402,  0.2927,  0.2927],
        [ 1.0280,  1.1155,  1.1506,  ...,  0.3277,  0.3277,  0.3102],
        [ 1.2206,  1.1856,  1.1681,  ...,  0.3627,  0.3452,  0.3102]])
tensor([[-0.4397, -0.4739, -0.4397,  ..., -0.8507, -0.9192, -0.9534],
        [-0.4397, -0.4568, -0.4054,  ..., -0.7822, -0.8849, -0.9192],
        [-0.4397, -0.4568, -0.3883,  ..., -0.7822, -0.8164, -0.8335],
        ...,
        [ 0.8961,  0.9474,  0.8961,  ...,  0.9988,  1.1358,  1.0673],
        [ 0.9132,  0.9474,  0.9474,  ...,  1.0844,  1.2385,  1.1529],
        [ 0.9474,  0.9646,  0.9988,  ...,  1.1187,  1.2214,  1.1187]])
tensor([[-0.3200, -0.3550, -0.3200,  ..., -0.7402, -0.8102, -0.8452],
        [-0.3200, -0.3375, -0.2850,  ..., -0.6702, -0.7752, -0.8102],
        [-0.3200, -0.3375, -0.2675,  ..., -0.6702, -0.7052, -0.7227],
        ...,
        [ 1.0455,  1.0980,  1.0455,  ...,  1.1506,  1.2906,  1.2206],
        [ 1.0630,  1.0980,  1.0980,  ...,  1.2381,  1.3957,  1.3081],
        [ 1.0980,  1.1155,  1.1506,  ...,  1.2731,  1.3782,  1.2731]])
tensor([[-1.5699, -1.5699, -1.5528,  ..., -1.8097, -1.8097, -1.8097],
        [-1.6042, -1.6042, -1.5870,  ..., -1.7925, -1.7925, -1.7925],
        [-1.6555, -1.6384, -1.6384,  ..., -1.7754, -1.7754, -1.7754],
        ...,
        [ 1.3413,  1.3413,  1.3413,  ...,  1.4954,  1.4954,  1.4954],
        [ 1.3584,  1.3755,  1.3755,  ...,  1.5125,  1.5125,  1.5125],
        [ 1.3584,  1.3755,  1.3755,  ...,  1.5125,  1.5125,  1.5125]])
tensor([[-1.4755, -1.4755, -1.4580,  ..., -1.7206, -1.7206, -1.7206],
        [-1.5105, -1.5105, -1.4930,  ..., -1.7031, -1.7031, -1.7031],
        [-1.5630, -1.5455, -1.5455,  ..., -1.6856, -1.6856, -1.6856],
        ...,
        [ 1.5007,  1.5007,  1.5007,  ...,  1.6583,  1.6583,  1.6583],
        [ 1.5182,  1.5357,  1.5357,  ...,  1.6758,  1.6758,  1.6758],
        [ 1.5182,  1.5357,  1.5357,  ...,  1.6758,  1.6758,  1.6758]])
tensor([[ 0.7419,  0.5707,  0.3309,  ..., -1.5528, -1.4843, -1.3130],
        [ 0.4166,  0.2967,  0.1768,  ..., -1.5185, -1.4329, -1.2445],
        [ 0.0227,  0.0056,  0.1254,  ..., -1.5357, -1.3815, -1.1932],
        ...,
        [-1.5699, -1.5699, -1.5357,  ..., -1.6384, -1.3302, -1.1932],
        [-1.5870, -1.5870, -1.5357,  ..., -1.7240, -1.5014, -1.2274],
        [-1.5528, -1.5528, -1.5357,  ..., -1.6042, -1.5699, -1.3302]])
tensor([[ 0.8880,  0.7129,  0.4678,  ..., -1.4580, -1.3880, -1.2129],
        [ 0.5553,  0.4328,  0.3102,  ..., -1.4230, -1.3354, -1.1429],
        [ 0.1527,  0.1352,  0.2577,  ..., -1.4405, -1.2829, -1.0903],
        ...,
        [-1.4755, -1.4755, -1.4405,  ..., -1.5455, -1.2304, -1.0903],
        [-1.4930, -1.4930, -1.4405,  ..., -1.6331, -1.4055, -1.1253],
        [-1.4580, -1.4580, -1.4405,  ..., -1.5105, -1.4755, -1.2304]])
tensor([[ 2.2318,  2.2147,  2.0434,  ...,  2.2318,  2.2489,  2.2147],
        [ 2.2318,  2.2318,  2.2318,  ...,  2.2489,  2.2489,  2.1975],
        [ 2.2318,  2.2147,  2.2147,  ...,  2.1804,  2.1633,  2.1119],
        ...,
        [-1.7069, -1.6898, -1.6213,  ..., -0.4397, -0.3198, -0.2342],
        [-1.6213, -1.6042, -1.6384,  ..., -0.4911, -0.3027, -0.1657],
        [-1.7240, -1.6727, -1.6555,  ..., -0.5253, -0.3712, -0.1999]])
tensor([[ 2.4111,  2.3936,  2.2185,  ...,  2.4111,  2.4286,  2.3936],
        [ 2.4111,  2.4111,  2.4111,  ...,  2.4286,  2.4286,  2.3761],
        [ 2.4111,  2.3936,  2.3936,  ...,  2.3585,  2.3410,  2.2885],
        ...,
        [-1.6155, -1.5980, -1.5280,  ..., -0.3200, -0.1975, -0.1099],
        [-1.5280, -1.5105, -1.5455,  ..., -0.3725, -0.1800, -0.0399],
        [-1.6331, -1.5805, -1.5630,  ..., -0.4076, -0.2500, -0.0749]])
tensor([[-1.5870, -1.6555, -1.5870,  ..., -1.5014, -1.5014, -1.5185],
        [-1.6384, -1.6042, -1.5699,  ..., -1.5357, -1.4843, -1.4500],
        [-1.3473, -1.3302, -1.4843,  ..., -1.5014, -1.5185, -1.5014],
        ...,
        [-0.6281, -0.3027, -0.0972,  ..., -0.4568, -0.3883, -0.3027],
        [-0.4739, -0.2171, -0.2856,  ..., -0.2171, -0.1828, -0.3883],
        [-0.5082, -0.3369, -0.4226,  ..., -0.1314, -0.3198, -0.2684]])
tensor([[-1.4930, -1.5630, -1.4930,  ..., -1.4055, -1.4055, -1.4230],
        [-1.5455, -1.5105, -1.4755,  ..., -1.4405, -1.3880, -1.3529],
        [-1.2479, -1.2304, -1.3880,  ..., -1.4055, -1.4230, -1.4055],
        ...,
        [-0.5126, -0.1800,  0.0301,  ..., -0.3375, -0.2675, -0.1800],
        [-0.3550, -0.0924, -0.1625,  ..., -0.0924, -0.0574, -0.2675],
        [-0.3901, -0.2150, -0.3025,  ..., -0.0049, -0.1975, -0.1450]])
Traceback (most recent call last):
  File "dann.py", line 293, in <module>
    main(args)
  File "dann.py", line 145, in main
    lr_scheduler, epoch, args)
  File "dann.py", line 185, in train
    x_s, labels_s = next(train_source_iter)
  File "/src/Transfer-Learning-Library/common/utils/data.py", line 50, in __next__
    data = next(self.iter)
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 517, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1182, in _next_data
    idx, data = self._get_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1148, in _get_data
    success, data = self._try_get_data()
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 986, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 104, in get
    if not self._poll(timeout):
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 257, in poll
    return self._poll(timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 414, in _poll
    r = wait([self], timeout)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 911, in wait
    ready = selector.select(timeout)
  File "/opt/conda/lib/python3.6/selectors.py", line 376, in select
    fd_event_list = self._poll.poll(timeout)
KeyboardInterrupt
