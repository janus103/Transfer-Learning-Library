Namespace(arch='resnet50', batch_size=16, bottleneck_dim=256, data='ImageNet50', epochs=300, iters_per_epoch=1000, log='dann', lr=0.01, lr_decay=0.75, lr_gamma=0.001, momentum=0.9, no_hflip=False, no_pool=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), per_class_eval=False, phase='train', print_freq=100, resize_size=224, root='/data/ImageNet_dataset/v100/jin/', scratch=False, seed=None, source=['IN'], target=['gray'], trade_off=1.0, train_resizing='custom.target', val_resizing='custom.target', weight_decay=0.001, workers=2)
train_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
)
val_transform:  Compose(
    Compose(
    ResizeImage(size=(224, 224))
    CenterCrop(size=(224, 224))
)
    ToTensor()
)
=> using model 'resnet50'
lr: 0.001
tensor([[0.8980, 0.9020, 0.7882,  ..., 0.0549, 0.0627, 0.0510],
        [0.9216, 0.9020, 0.8000,  ..., 0.0510, 0.0627, 0.0588],
        [0.9412, 0.9137, 0.8235,  ..., 0.0549, 0.0588, 0.0627],
        ...,
        [0.6784, 0.6549, 0.6471,  ..., 0.0588, 0.0588, 0.0510],
        [0.6627, 0.6392, 0.6118,  ..., 0.0392, 0.0471, 0.0510],
        [0.6353, 0.5961, 0.5647,  ..., 0.0392, 0.0353, 0.0431]])
tensor([[0.8980, 0.9020, 0.7882,  ..., 0.0549, 0.0627, 0.0510],
        [0.9216, 0.9020, 0.8000,  ..., 0.0510, 0.0627, 0.0588],
        [0.9412, 0.9137, 0.8235,  ..., 0.0549, 0.0588, 0.0627],
        ...,
        [0.6784, 0.6549, 0.6471,  ..., 0.0588, 0.0588, 0.0510],
        [0.6627, 0.6392, 0.6118,  ..., 0.0392, 0.0471, 0.0510],
        [0.6353, 0.5961, 0.5647,  ..., 0.0392, 0.0353, 0.0431]])
Epoch: [0][   0/1000]	Time  1.42 ( 1.42)	Data  0.01 ( 0.01)	Loss   4.52 (  4.52)	Cls Acc 0.0 (0.0)	Domain Acc 50.0 (50.0)
tensor([[0.4745, 0.3608, 0.4431,  ..., 0.5137, 0.6275, 0.6745],
        [0.3725, 0.3451, 0.3647,  ..., 0.5882, 0.6118, 0.5686],
        [0.3333, 0.3569, 0.3647,  ..., 0.5725, 0.5569, 0.5647],
        ...,
        [0.3647, 0.3725, 0.3882,  ..., 0.5294, 0.5294, 0.6118],
        [0.4078, 0.3647, 0.3490,  ..., 0.4510, 0.5294, 0.4392],
        [0.3569, 0.3176, 0.3294,  ..., 0.4784, 0.5569, 0.4588]])
tensor([[0.4745, 0.3608, 0.4431,  ..., 0.5137, 0.6275, 0.6745],
        [0.3725, 0.3451, 0.3647,  ..., 0.5882, 0.6118, 0.5686],
        [0.3333, 0.3569, 0.3647,  ..., 0.5725, 0.5569, 0.5647],
        ...,
        [0.3647, 0.3725, 0.3882,  ..., 0.5294, 0.5294, 0.6118],
        [0.4078, 0.3647, 0.3490,  ..., 0.4510, 0.5294, 0.4392],
        [0.3569, 0.3176, 0.3294,  ..., 0.4784, 0.5569, 0.4588]])
tensor([[0.3255, 0.4235, 0.5725,  ..., 0.3020, 0.4627, 0.4902],
        [0.3569, 0.4471, 0.5725,  ..., 0.3725, 0.3569, 0.4000],
        [0.3569, 0.4549, 0.5843,  ..., 0.2824, 0.3569, 0.3608],
        ...,
        [0.3647, 0.3686, 0.3765,  ..., 0.3451, 0.3529, 0.3451],
        [0.3686, 0.3686, 0.3765,  ..., 0.3490, 0.3451, 0.3333],
        [0.3804, 0.3765, 0.3765,  ..., 0.3412, 0.3412, 0.3255]])
tensor([[0.3255, 0.4235, 0.5725,  ..., 0.3020, 0.4627, 0.4902],
        [0.3569, 0.4471, 0.5725,  ..., 0.3725, 0.3569, 0.4000],
        [0.3569, 0.4549, 0.5843,  ..., 0.2824, 0.3569, 0.3608],
        ...,
        [0.3647, 0.3686, 0.3765,  ..., 0.3451, 0.3529, 0.3451],
        [0.3686, 0.3686, 0.3765,  ..., 0.3490, 0.3451, 0.3333],
        [0.3804, 0.3765, 0.3765,  ..., 0.3412, 0.3412, 0.3255]])
tensor([[0.7451, 0.7490, 0.7451,  ..., 0.7137, 0.7412, 0.7412],
        [0.7373, 0.7490, 0.7451,  ..., 0.7020, 0.7294, 0.7294],
        [0.7412, 0.7529, 0.7490,  ..., 0.7137, 0.7373, 0.7412],
        ...,
        [0.7608, 0.7882, 0.7373,  ..., 0.6431, 0.6431, 0.6392],
        [0.7725, 0.7647, 0.7529,  ..., 0.5765, 0.6431, 0.6980],
        [0.7529, 0.7176, 0.7412,  ..., 0.6588, 0.6863, 0.7216]])
tensor([[0.7451, 0.7490, 0.7451,  ..., 0.7137, 0.7412, 0.7412],
        [0.7373, 0.7490, 0.7451,  ..., 0.7020, 0.7294, 0.7294],
        [0.7412, 0.7529, 0.7490,  ..., 0.7137, 0.7373, 0.7412],
        ...,
        [0.7608, 0.7882, 0.7373,  ..., 0.6431, 0.6431, 0.6392],
        [0.7725, 0.7647, 0.7529,  ..., 0.5765, 0.6431, 0.6980],
        [0.7529, 0.7176, 0.7412,  ..., 0.6588, 0.6863, 0.7216]])
tensor([[0.0627, 0.0745, 0.0824,  ..., 0.1098, 0.1137, 0.0941],
        [0.0784, 0.0863, 0.0980,  ..., 0.2196, 0.1686, 0.1216],
        [0.0980, 0.1020, 0.0980,  ..., 0.2078, 0.1647, 0.1333],
        ...,
        [0.0196, 0.0196, 0.0196,  ..., 0.0196, 0.0235, 0.0275],
        [0.0196, 0.0196, 0.0118,  ..., 0.0196, 0.0235, 0.0275],
        [0.0196, 0.0196, 0.0157,  ..., 0.0196, 0.0235, 0.0275]])
tensor([[0.0627, 0.0745, 0.0824,  ..., 0.1098, 0.1137, 0.0941],
        [0.0784, 0.0863, 0.0980,  ..., 0.2196, 0.1686, 0.1216],
        [0.0980, 0.1020, 0.0980,  ..., 0.2078, 0.1647, 0.1333],
        ...,
        [0.0196, 0.0196, 0.0196,  ..., 0.0196, 0.0235, 0.0275],
        [0.0196, 0.0196, 0.0118,  ..., 0.0196, 0.0235, 0.0275],
        [0.0196, 0.0196, 0.0157,  ..., 0.0196, 0.0235, 0.0275]])
tensor([[0.3098, 0.2196, 0.2471,  ..., 0.2980, 0.2471, 0.2392],
        [0.1608, 0.1922, 0.2471,  ..., 0.2941, 0.2353, 0.1882],
        [0.1686, 0.2118, 0.1922,  ..., 0.1961, 0.2980, 0.2078],
        ...,
        [0.2941, 0.3647, 0.3098,  ..., 0.2157, 0.2471, 0.2784],
        [0.3059, 0.3412, 0.3529,  ..., 0.2118, 0.2275, 0.2471],
        [0.3569, 0.3490, 0.3412,  ..., 0.2157, 0.2118, 0.2314]])
tensor([[0.3098, 0.2196, 0.2471,  ..., 0.2980, 0.2471, 0.2392],
        [0.1608, 0.1922, 0.2471,  ..., 0.2941, 0.2353, 0.1882],
        [0.1686, 0.2118, 0.1922,  ..., 0.1961, 0.2980, 0.2078],
        ...,
        [0.2941, 0.3647, 0.3098,  ..., 0.2157, 0.2471, 0.2784],
        [0.3059, 0.3412, 0.3529,  ..., 0.2118, 0.2275, 0.2471],
        [0.3569, 0.3490, 0.3412,  ..., 0.2157, 0.2118, 0.2314]])
Traceback (most recent call last):
  File "dann.py", line 293, in <module>
    main(args)
  File "dann.py", line 145, in main
    lr_scheduler, epoch, args)
  File "dann.py", line 217, in train
    loss.backward()
  File "/opt/conda/lib/python3.6/site-packages/torch/tensor.py", line 245, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/opt/conda/lib/python3.6/site-packages/torch/autograd/__init__.py", line 147, in backward
    allow_unreachable=True, accumulate_grad=True)  # allow_unreachable flag
KeyboardInterrupt
